RoboFlow는 데이터셋 준비와 라벨링, 형식 변환을 쉽게 도와주는 플랫폼

https://app.roboflow.com/join/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3b3Jrc3BhY2VJZCI6IjU1V09QYTQzT0tmbFFBeFFJSUZ1Y3VxMjFyazEiLCJyb2xlIjoib3duZXIiLCJpbnZpdGVyIjoiYTgyODU3MTI4QGdtYWlsLmNvbSIsImlhdCI6MTc0MzU4MDA5OH0.rxUBKy_xeuJMw2j1RpcAf0Z_Yf2S2reaKlykbjOAhp8


1. roboflow
 1) 프로젝트 생성
 2) image 한개 업로드하면 추가적인 이미지 추가 가능
 3) 라벨링(자동)
 4) annotate(객체인식 수정) ex)핸드폰 노트북 등 삭제 작업
 5) 데이터 셋
 6) version에서 사용할 서비스 선택후 다운로드

1. 라이브러리 설치

!pip install ultralytics

!pip install opencv-python-headless matplotlib

2. Google Drive 마운트
from google.colab import drive
drive.mount('/content/drive')

3. 압출폴더 풀고 디렉토리 만들기 (train 자료 -> test,valid)
 1) test,valid
 2) test 테스트 용도
 3) valid : 실직적으로 사용할 폴더
# 다시 압축 후 colab에 올리기

4. 
!ls /content/Object_Detection.v1i.yolov8.zip
%mkdir dataset
!unzip /content/Object_Detection.v1i.yolov8.zip -d /content/dataset/

5.
import yaml

# YAML 내용 작성
dataset = {
    'path': '/content/dataset',    # dataset 폴더의 상위 경로
    'train': 'train/images',       # 훈련 이미지 폴더
    'val': 'valid/images',         # 검증 이미지 폴더
    'test': 'test/images',         # 테스트 이미지 폴더 (선택 사항)
    'nc': 3,                       # 클래스 수
    'names': ['person1','person2','person3']            # 클래스 이름
}

6.
from ultralytics import YOLO

# 훈련할 데이터셋의 경로
dataset_yaml = '/content/dataset/dataset.yaml'  # 데이터셋 YAML 파일 경로

# 모델 훈련 시작
model = YOLO('yolov8n.pt')  # 모델 로드 (사전 훈련된 모델 사용)

# 훈련 시작 (훈련 후 모델이 '/content/runs/train/exp/weights/best.pt'에 저장됨)
model.train(
    data=dataset_yaml,  # 데이터셋 파일 경로
    epochs=50,  # 훈련 에포크 수
    imgsz=640,  # 이미지 크기
    project='/content/runs/train',  # 훈련 결과를 저장할 기본 경로
    name='exp',  # 훈련 결과를 저장할 폴더 이름 (exp로 설정)
    exist_ok=True  # 기존에 동일한 폴더가 있으면 덮어쓰기 허용
)

# 훈련이 끝나면 모델 파일이 '/content/runs/train/exp/weights/best.pt'에 저장됩니다.
---------------------------------------------------------
data: 데이터셋 경로입니다. RoboFlow에서 다운로드한 YOLO 형식 데이터셋의 경로를 설정합니다.

epochs: 훈련할 에포크 수입니다.

imgsz: 훈련할 이미지 크기입니다. 보통 640x640 정도로 설정합니다.
-----------------------------------------------------



4단계: 예측 및 평가
훈련된 모델을 사용하여 새로운 이미지에서 객체를 탐지할 수 있습니다.

4.1 예측 실행
훈련이 완료된 후, YOLOv8 모델을 사용하여 객체 탐지를 실행할 수 있습니다.

python
복사
# 모델 로드
model = YOLO('/content/runs/train/exp/weights/best.pt')  # 훈련 후 가장 좋은 모델

# 이미지로 객체 탐지
results = model('/content/drive/MyDrive/test_image.jpg')

# 결과 출력
results.show()  # 탐지된 객체가 포함된 이미지를 화면에 출력
results.save()  # 결과 이미지 저장
model(): 훈련된 모델을 로드하고, 이미지를 인자로 전달하여 예측을 실행합니다.

results.show(): 예측 결과를 화면에 출력합니다.

results.save(): 예측된 결과를 이미지 파일로 저장합니다.

4.2 결과 분석
모델의 성능을 분석하기 위해서 정확도와 손실 값을 체크할 수 있습니다. 또한, 여러 이미지를 사용하여 모델의 성능을 평가할 수 있습니다.

5단계: 모델 배포 (선택 사항)
훈련된 YOLOv8 모델을 웹 애플리케이션이나 API로 배포하려면, 이를 REST API 또는 Flask와 같은 웹 프레임워크로 감싸서 사용할 수 있습니다.

요약
RoboFlow에서 데이터셋 준비: RoboFlow에서 이미지를 업로드하고 라벨링 후, 데이터를 YOLO 형식으로 내보냅니다.

Google Colab 환경 설정: Colab에서 YOLOv8을 사용하기 위한 라이브러리를 설치하고, Google Drive를 마운트합니다.

YOLOv8 훈련: YOLOv8을 사용하여 데이터를 훈련시키고, 훈련된 모델을 얻습니다.

예측 및 평가: 훈련된 모델을 사용하여 객체 탐지 작업을 수행합니다.

이 과정을 통해 RoboFlow와 YOLOv8을 결합하여 객체 탐지 모델을 훈련시키고, 예측 결과를 분석할 수 있습니다.


-----------------------------------------------------
★1단계: 훈련된 모델 불러오기

from ultralytics import YOLO

# 훈련된 모델 불러오기
model = YOLO('/content/runs/train/exp/weights/best.pt')  # best.pt는 훈련된 모델의 경로


★2단계: 예측 수행 (Inference)

# 예측할 이미지 경로
image_path = '/content/dataset/test/images'

# 예측 수행
results = model(image_path)

# 예측된 이미지 출력 (여러 이미지가 예측된 경우, 각각 출력)
for result in results:
    result.show()  # 각 결과에 대해 show 호출

★3단계: 예측된 결과 저장

# 예측된 이미지 파일 저장
for result in results:
    result.save()  # 예측된 이미지를 저장

★4단계: 평가 수행 (Evaluation)

# 평가할 데이터셋 경로 (이미 검증용 데이터셋 준비가 되어 있어야 합니다)
dataset_path = '/content/dataset/valid/images'

# 평가 수행
results = model.evaluate(data=dataset_path, imgsz=640)

''' 오류남
# 평가 결과 출력
print("Evaluation Results:", results.pandas().xywh)
print("Mean Average Precision (mAP):", results.boxes.mAP50)


★5단계: 결과 시각화 및 분석

# 예측된 결과의 Pandas DataFrame 출력
print(results.pandas().xywh)  # xywh 형식으로 예측 결과 출력


★6단계: 여러 이미지에 대한 예측

from ultralytics import YOLO
import cv2
from matplotlib import pyplot as plt

# 훈련된 모델 불러오기
model = YOLO('/content/runs/train/exp/weights/best.pt')  # 훈련된 모델 경로

# 예측할 이미지 경로
image_path = '/content/dataset/test/images'  # 예측할 이미지 경로

# 예측 수행
results = model(image_path)

# 예측된 이미지 출력
for result in results:
    result.show()# 예측된 이미지를 시각화

★7단계: 모델 튜닝 및 하이퍼파라미터 조정

훈련된 모델의 성능을 더욱 향상시키려면 하이퍼파라미터를 조정해야 할 수도 있습니다. 예를 들어, learning_rate, batch_size, epochs 등 다양한 하이퍼파라미터를 조정하여 모델의 성능을 최적화할 수 있습니다.

훈련 시 하이퍼파라미터를 변경하려면 model.train() 메서드를 사용하면서 적절히 하이퍼파라미터를 설정합니다.

# 훈련 시 하이퍼파라미터 설정
model.train(data='/content/dataset/dataset.yaml', epochs=100, batch=16, imgsz=640, lr0=0.01, lrf=0.1)

★8단계: 추론 속도 최적화


# FP16 모드로 예측 수행 (속도 개선)
results = model(image_path, half=True)






